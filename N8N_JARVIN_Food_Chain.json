{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -288,
        144
      ],
      "id": "e8e93544-ba76-47da-a3f8-4988f588a393",
      "name": "When chat message received",
      "webhookId": "ce1ebedb-b647-4915-a644-be4bc0388256"
    },
    {
      "parameters": {
        "messages": {
          "messageValues": [
            {
              "message": "Eres un asistente llamado JARVIS que interpreta mensajes recibidos por WhatsApp para gestionar pedidos de comida. |La carta es conformado por lo siguiente: Perros caliente: sencillos y grandes, sencillo a 5 mil pesos, grandes a 10 mil;  Pizza: Jamon con queso a 10 mil y 20 mil la de pollo con champiñones; Carnívora a 35 mil pesos, Vegatariana a 12 mil pesos;  Empanadas argentinas a 8 mil pesos; Hamburguesas veganas a 13 mil pesos, hamburguesas con tocineta y doble carne a 24 mil pesos; Adiciones de papas a las francesas a 5 mil pesos; Aros de cebolla a 5 mil; Gaseosas de productos postobon a 4 mil pesos, coca cola a 5 mil pesos, te hatsu a 3 mil pesos, soda hatsu a 4 mil pesos, jugos hit a 2 mil pesos; Menu infantil con pollo frito y porción de papas fritas a 14 mil pesos. Adicion de queso extra a 4 mil pesos, adicion de salsa tartara a 2 mil pesos y adicion de pepinillos a 1 mil pesos.  Debes recibir la orden por parte del usuario, decirle el precio total de su orden y que te indiquen cual es el medio de pago entre: Transferencia, QR, Nequi, EfectivoLa salida debería seguir una estructura como:{ “Pedido”: 1, “Productos”: {“perros”: 2, “pizza”:1}, “Precio”: {“perros”: 20000, “pizza”: 10000}, “Pago”: “Transferencia”, “Total”: 30000, “IVA”: 3000, “Hora”: “16-09-2025 18:23 pm” }"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -32,
        144
      ],
      "id": "521f90a8-e487-4635-82bf-e70a9c1ba1fe",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -32,
        320
      ],
      "id": "fa65fc4b-fc9d-4926-8aca-14da6ba306fc",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "Ck8uWVWzaFowtEzp",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "gustavojerezt@gmail.com",
        "subject": "=Pedidos",
        "message": "={{$json.html}}",
        "options": {
          "appendAttribution": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        496,
        -80
      ],
      "id": "a40cb413-5867-41a3-9f57-7fc76cb6c133",
      "name": "Send a message",
      "webhookId": "601595d5-3446-477f-9064-b1c84b51c815",
      "credentials": {
        "gmailOAuth2": {
          "id": "59XlyqmP9Nmr7Q38",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Function node: Parse $json.text (with smart quotes) and build HTML\n\n// --- Robust parser ---\nfunction parseInput(txt) {\n  if (typeof txt === 'object' && txt !== null) return txt;\n  if (typeof txt !== 'string') return {};\n\n  let s = String(txt).trim();\n\n  // Normalize Unicode quotes/spaces\n  s = s\n    .replace(/[\\u201C\\u201D\\u201E\\u201F]/g, '\"')   // “ ” -> \"\n    .replace(/[\\u2018\\u2019\\u201A\\u201B]/g, \"'\")  // ‘ ’ -> '\n    .replace(/[\\u00A0\\u202F]/g, ' ');             // NBSP, thin space -> space\n\n  // Keep only the outermost {...}\n  const start = s.indexOf('{');\n  const end = s.lastIndexOf('}');\n  if (start !== -1 && end > start) s = s.slice(start, end + 1);\n\n  // Remove trailing commas\n  s = s.replace(/,\\s*([}\\]])/g, '$1');\n\n  try { return JSON.parse(s); } catch (e) {\n    // As last resort: replace CRLF escapes that some LLMs leak (optional)\n    try { return JSON.parse(s.replace(/\\\\n/g, ' ')); } catch {}\n  }\n  return {};\n}\n\n// --- Helpers ---\nconst fmt = (n) => (Number.isFinite(n) ? n.toLocaleString('es-CO') : '—');\n\n// --- Parse source JSON from $json.text ---\nconst src = parseInput($json.text);\n\n// Safe reads\nconst p = src.Productos ?? {};\nconst price = src.Precio ?? {};\nconst total = src.Total ?? null;\nconst pago = src.Pago ?? '—';\nconst pedidoId = 'PED-' + $now.toFormat('yyyyLLddHHmmss') + '-' + Math.random().toString(36).slice(2,6).toUpperCase();\nconst hora = src.Hora ?? '—';\n\n// Build product list\nconst items = Object.keys(p).map(k => {\n  const qty = p[k];\n  const subtotal = price?.[k];\n  const line = (subtotal != null)\n    ? `${qty} × ${k} — ${fmt(subtotal)} pesos`\n    : `${qty} × ${k}`;\n  return `<li>${line}</li>`;\n}).join('\\n');\n\n// HTML body\nconst html = `\n<h1>JARVIS FOOD CHAIN</h1>\n<p><strong>Nuevo pedido recibido</strong></p>\n<p><strong>Pedido:</strong> ${pedidoId}<br/>\n<strong>Hora:</strong> ${hora}</p>\n<p><strong>Total:</strong> ${fmt(total)} pesos<br/>\n<strong>Método de pago:</strong> ${pago}</p>\n<p><strong>Productos:</strong></p>\n<ul>\n${items || '<li>(Sin ítems)</li>'}\n</ul>\n<p><em>¿Todo correcto? Si deseas agregar algo más, solo dime. ¡Gracias por tu pedido!</em></p>\n<hr/>\n`;\n\nconst subject = `🧾 Pedido ${pedidoId} — Total ${fmt(total)} pesos`;\n\nreturn [{\n  json: {\n    ...src,\n    subject,\n    html\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        -80
      ],
      "id": "f4e6ada6-6bf1-412a-b155-ba097f526da6",
      "name": "Parse HTML to email"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "11x8ciRPWRI9cg7R8eLX08WFQxR95lEsfpd-OkpifS3w",
          "mode": "list",
          "cachedResultName": "DB Pedidos JARVIS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11x8ciRPWRI9cg7R8eLX08WFQxR95lEsfpd-OkpifS3w/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Orders",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11x8ciRPWRI9cg7R8eLX08WFQxR95lEsfpd-OkpifS3w/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Pedido",
              "displayName": "Pedido",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Hora",
              "displayName": "Hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Pago",
              "displayName": "Pago",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Total",
              "displayName": "Total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "IVA",
              "displayName": "IVA",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "productos_str",
              "displayName": "productos_str",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "perros_qty",
              "displayName": "perros_qty",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "perros_subtotal",
              "displayName": "perros_subtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "pizza_qty",
              "displayName": "pizza_qty",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "pizza_subtotal",
              "displayName": "pizza_subtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "empanadas_qty",
              "displayName": "empanadas_qty",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "empanadas_subtotal",
              "displayName": "empanadas_subtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        720,
        128
      ],
      "id": "6742e178-f163-408a-a32d-f4fb86ab34e5",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0yAaNRoSTVsrzFwn",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Function node: Parse $json.text and output a single row for Sheets (Append)\n\n// --- Robust parser (same as above) ---\nfunction parseInput(txt) {\n  if (typeof txt === 'object' && txt !== null) return txt;\n  if (typeof txt !== 'string') return {};\n\n  let s = String(txt).trim();\n  s = s\n    .replace(/[\\u201C\\u201D\\u201E\\u201F]/g, '\"')\n    .replace(/[\\u2018\\u2019\\u201A\\u201B]/g, \"'\")\n    .replace(/[\\u00A0\\u202F]/g, ' ');\n  const start = s.indexOf('{');\n  const end = s.lastIndexOf('}');\n  if (start !== -1 && end > start) s = s.slice(start, end + 1);\n  s = s.replace(/,\\s*([}\\]])/g, '$1');\n\n  try { return JSON.parse(s); } catch {\n    try { return JSON.parse(s.replace(/\\\\n/g, ' ')); } catch {}\n  }\n  return {};\n}\n\nconst fmtNum = (n) => (Number.isFinite(n) ? n : null);\n\n// --- Parse ---\nconst src = parseInput($json.text);\n\nconst p = src.Productos ?? {};\nconst price = src.Precio ?? {};\n\nconst row = {\n  Pedido: 'PED-' + $now.toFormat('yyyyLLddHHmmss') + '-' + Math.random().toString(36).slice(2,6).toUpperCase(),\n  Hora: src.Hora ?? null,\n  Pago: src.Pago ?? null,\n  Total: fmtNum(src.Total) ?? null,\n  IVA: fmtNum(src.IVA) ?? null,\n};\n\n// Human-readable summary\nconst pairs = Object.keys(p).map(k => {\n  const qty = p[k];\n  const subtotal = price?.[k];\n  return subtotal != null ? `${k}:${qty} (subtotal ${subtotal})` : `${k}:${qty}`;\n});\nrow.productos_str = pairs.join('; ');\n\n// Dynamic columns per product\nfor (const k of Object.keys(p)) {\n  row[`${k}_qty`] = fmtNum(p[k]);\n  if (price?.[k] != null) row[`${k}_subtotal`] = fmtNum(price[k]);\n}\n\n// Output one item -> one row\nreturn [{ json: row }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        144
      ],
      "id": "bd070a63-31b3-4f7a-aad3-80539075dfed",
      "name": "Convert output to row data"
    },
    {
      "parameters": {
        "message": "Por favor envía confirmación de pago para proceder con el pedido :)",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        640,
        304
      ],
      "id": "981fad9a-a219-4d9f-b16f-8340b8f320f6",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "80d2b46d-9478-4f5e-8d3b-f17a51b33457",
              "leftValue": "={{$json.Total}}",
              "rightValue": 10000,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "976a00ac-f53d-478e-8b4b-6414e5d8d74c",
              "leftValue": "={{ $json.Pago }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        496,
        144
      ],
      "id": "be320dcd-e6d0-4b2e-8392-f25b152ea0ca",
      "name": "Check payment"
    }
  ],
  "pinData": {},
  "connections": {
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Convert output to row data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse HTML to email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse HTML to email": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert output to row data": {
      "main": [
        [
          {
            "node": "Check payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check payment": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d084a081-15d9-4034-928e-1f8ab325faef",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e1fb546a7222f890a6c3a32a54acc6591857eb1df268d54d7b73f019edce6eef"
  },
  "id": "w1hGY7EmDExHktC6",
  "tags": []
}